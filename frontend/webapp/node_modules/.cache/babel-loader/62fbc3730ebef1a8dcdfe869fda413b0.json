{"remainingRequest":"/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/node_modules/babel-loader/lib/index.js!/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/src/api/AccountService.js","dependencies":[{"path":"/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/src/api/AccountService.js","mtime":1614159741868},{"path":"/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gQ29kZSBnZW5lcmF0ZWQgYnkgb3RvOyBETyBOT1QgRURJVC4KJ3VzZSBzdHJpY3QnOyAvLyBBY2NvdW50U2VydmljZSBoYW5kbGVzIGFuZCBtYW5hZ2VzIGFwcGxpY2F0aW9uIHVzZXJzCgppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2tvbnN0YW50aW5nYXNzZXIvZ28vc3JjL2dpdGh1Yi5jb20vS29uc3RhbnRpbkdhc3Nlci9zdHVkaG91c2UvZnJvbnRlbmQvYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMva29uc3RhbnRpbmdhc3Nlci9nby9zcmMvZ2l0aHViLmNvbS9Lb25zdGFudGluR2Fzc2VyL3N0dWRob3VzZS9mcm9udGVuZC9hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMva29uc3RhbnRpbmdhc3Nlci9nby9zcmMvZ2l0aHViLmNvbS9Lb25zdGFudGluR2Fzc2VyL3N0dWRob3VzZS9mcm9udGVuZC9hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKZXhwb3J0IHZhciBBY2NvdW50U2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQWNjb3VudFNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3VudFNlcnZpY2UpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFjY291bnRTZXJ2aWNlLCBbewogICAga2V5OiAiY3JlYXRlVXNlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NyZWF0ZVVzZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY3JlYXRlVXNlclJlcXVlc3QpIHsKICAgICAgICB2YXIgaGVhZGVycywgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNyZWF0ZVVzZXJSZXF1ZXN0ID0gY3JlYXRlVXNlclJlcXVlc3QgfHwge307CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL290by9BY2NvdW50U2VydmljZS5DcmVhdGVVc2VyJywgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycywKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY3JlYXRlVXNlclJlcXVlc3QpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24gKGpzb24pIHsKICAgICAgICAgICAgICAgICAgaWYgKGpzb24uZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoanNvbi5lcnJvcik7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiBqc29uOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlVXNlcihfeCkgewogICAgICAgIHJldHVybiBfY3JlYXRlVXNlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlVXNlcjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImxvZ2luVXNlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xvZ2luVXNlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobG9naW5Vc2VyUmVxdWVzdCkgewogICAgICAgIHZhciBoZWFkZXJzLCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGxvZ2luVXNlclJlcXVlc3QgPSBsb2dpblVzZXJSZXF1ZXN0IHx8IHt9OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjgwODAvb3RvL0FjY291bnRTZXJ2aWNlLkxvZ2luVXNlcicsIHsKICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsCiAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGxvZ2luVXNlclJlcXVlc3QpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoanNvbikgewogICAgICAgICAgICAgICAgICBpZiAoanNvbi5lcnJvcikgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihqc29uLmVycm9yKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzb247CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGxvZ2luVXNlcihfeDIpIHsKICAgICAgICByZXR1cm4gX2xvZ2luVXNlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gbG9naW5Vc2VyOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQWNjb3VudFNlcnZpY2U7Cn0oKTs="},{"version":3,"sources":["/Users/konstantingasser/go/src/github.com/KonstantinGasser/studhouse/frontend/app/src/api/AccountService.js"],"names":["AccountService","createUserRequest","headers","fetch","method","body","JSON","stringify","response","json","then","error","Error","loginUserRequest"],"mappings":"AAAA;AAEA,a,CAGA;;;;;;;AACA,WAAaA,cAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gFAEC,iBAAiBC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,gBAAAA,OADP,GACiB;AACf,4BAAU,kBADK;AAEf,kCAAgB;AAFD,iBADjB;AAKCD,gBAAAA,iBAAiB,GAAGA,iBAAiB,IAAI,EAAzC;AALD;AAAA,uBAMwBE,KAAK,CAAC,qDAAD,EAAwD;AACnFC,kBAAAA,MAAM,EAAE,MAD2E;AAEnFF,kBAAAA,OAAO,EAAEA,OAF0E;AAGnFG,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,iBAAf;AAH6E,iBAAxD,CAN7B;;AAAA;AAMOO,gBAAAA,QANP;AAAA,iDAWQA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqB,UAAAD,IAAI,EAAI;AACnC,sBAAIA,IAAI,CAACE,KAAT,EAAgB;AACf,0BAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACE,KAAf,CAAN;AACA;;AACD,yBAAOF,IAAP;AACA,iBALM,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAqBC,kBAAgBI,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACOX,gBAAAA,OADP,GACiB;AACf,4BAAU,kBADK;AAEf,kCAAgB;AAFD,iBADjB;AAKCW,gBAAAA,gBAAgB,GAAGA,gBAAgB,IAAI,EAAvC;AALD;AAAA,uBAMwBV,KAAK,CAAC,oDAAD,EAAuD;AAClFC,kBAAAA,MAAM,EAAE,MAD0E;AAElFF,kBAAAA,OAAO,EAAEA,OAFyE;AAGlFG,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeM,gBAAf;AAH4E,iBAAvD,CAN7B;;AAAA;AAMOL,gBAAAA,QANP;AAAA,kDAWQA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqB,UAAAD,IAAI,EAAI;AACnC,sBAAIA,IAAI,CAACE,KAAT,EAAgB;AACf,0BAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACE,KAAf,CAAN;AACA;;AACD,yBAAOF,IAAP;AACA,iBALM,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OArBD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["// Code generated by oto; DO NOT EDIT.\n\n'use strict';\n\n \n// AccountService handles and manages application users\nexport class AccountService {\n\t\n\tasync createUser(createUserRequest) {\n\t\tconst headers = {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t}\n\t\tcreateUserRequest = createUserRequest || {}\n\t\tconst response = await fetch('http://localhost:8080/oto/AccountService.CreateUser', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(createUserRequest)\n\t\t})\n\t\treturn response.json().then(json => {\n\t\t\tif (json.error) {\n\t\t\t\tthrow new Error(json.error)\n\t\t\t}\n\t\t\treturn json\n\t\t})\n\t}\n\t\n\tasync loginUser(loginUserRequest) {\n\t\tconst headers = {\n\t\t\t'Accept': 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t}\n\t\tloginUserRequest = loginUserRequest || {}\n\t\tconst response = await fetch('http://localhost:8080/oto/AccountService.LoginUser', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: headers,\n\t\t\tbody: JSON.stringify(loginUserRequest)\n\t\t})\n\t\treturn response.json().then(json => {\n\t\t\tif (json.error) {\n\t\t\t\tthrow new Error(json.error)\n\t\t\t}\n\t\t\treturn json\n\t\t})\n\t}\n\t\n}\n\n"]}]}