// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppAdministerClient is the client API for AppAdminister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAdministerClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	MayAcquireToken(ctx context.Context, in *MayAcquireTokenRequest, opts ...grpc.CallOption) (*MayAcquireTokenResponse, error)
}

type appAdministerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAdministerClient(cc grpc.ClientConnInterface) AppAdministerClient {
	return &appAdministerClient{cc}
}

func (c *appAdministerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppAdminister/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAdministerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppAdminister/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAdministerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppAdminister/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAdministerClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppAdminister/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAdministerClient) MayAcquireToken(ctx context.Context, in *MayAcquireTokenRequest, opts ...grpc.CallOption) (*MayAcquireTokenResponse, error) {
	out := new(MayAcquireTokenResponse)
	err := c.cc.Invoke(ctx, "/app_proto.AppAdminister/MayAcquireToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAdministerServer is the server API for AppAdminister service.
// All implementations must embed UnimplementedAppAdministerServer
// for forward compatibility
type AppAdministerServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	MayAcquireToken(context.Context, *MayAcquireTokenRequest) (*MayAcquireTokenResponse, error)
	mustEmbedUnimplementedAppAdministerServer()
}

// UnimplementedAppAdministerServer must be embedded to have forward compatible implementations.
type UnimplementedAppAdministerServer struct {
}

func (UnimplementedAppAdministerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppAdministerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppAdministerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppAdministerServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAppAdministerServer) MayAcquireToken(context.Context, *MayAcquireTokenRequest) (*MayAcquireTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MayAcquireToken not implemented")
}
func (UnimplementedAppAdministerServer) mustEmbedUnimplementedAppAdministerServer() {}

// UnsafeAppAdministerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAdministerServer will
// result in compilation errors.
type UnsafeAppAdministerServer interface {
	mustEmbedUnimplementedAppAdministerServer()
}

func RegisterAppAdministerServer(s grpc.ServiceRegistrar, srv AppAdministerServer) {
	s.RegisterService(&AppAdminister_ServiceDesc, srv)
}

func _AppAdminister_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdministerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppAdminister/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdministerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAdminister_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdministerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppAdminister/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdministerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAdminister_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdministerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppAdminister/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdministerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAdminister_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdministerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppAdminister/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdministerServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAdminister_MayAcquireToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MayAcquireTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAdministerServer).MayAcquireToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app_proto.AppAdminister/MayAcquireToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAdministerServer).MayAcquireToken(ctx, req.(*MayAcquireTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppAdminister_ServiceDesc is the grpc.ServiceDesc for AppAdminister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAdminister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_proto.AppAdminister",
	HandlerType: (*AppAdministerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppAdminister_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppAdminister_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppAdminister_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AppAdminister_GetList_Handler,
		},
		{
			MethodName: "MayAcquireToken",
			Handler:    _AppAdminister_MayAcquireToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.app-administer/proto/app-administer.proto",
}
