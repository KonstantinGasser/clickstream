// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPermissionsClient is the client API for UserPermissions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPermissionsClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error)
	RevokeApp(ctx context.Context, in *RevokeAppRequest, opts ...grpc.CallOption) (*RevokeAppResponse, error)
}

type userPermissionsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermissionsClient(cc grpc.ClientConnInterface) UserPermissionsClient {
	return &userPermissionsClient{cc}
}

func (c *userPermissionsClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.UserPermissions/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.UserPermissions/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionsClient) AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error) {
	out := new(AddAppResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.UserPermissions/AddApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionsClient) RevokeApp(ctx context.Context, in *RevokeAppRequest, opts ...grpc.CallOption) (*RevokeAppResponse, error) {
	out := new(RevokeAppResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.UserPermissions/RevokeApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermissionsServer is the server API for UserPermissions service.
// All implementations must embed UnimplementedUserPermissionsServer
// for forward compatibility
type UserPermissionsServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error)
	RevokeApp(context.Context, *RevokeAppRequest) (*RevokeAppResponse, error)
	mustEmbedUnimplementedUserPermissionsServer()
}

// UnimplementedUserPermissionsServer must be embedded to have forward compatible implementations.
type UnimplementedUserPermissionsServer struct {
}

func (UnimplementedUserPermissionsServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedUserPermissionsServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserPermissionsServer) AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApp not implemented")
}
func (UnimplementedUserPermissionsServer) RevokeApp(context.Context, *RevokeAppRequest) (*RevokeAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeApp not implemented")
}
func (UnimplementedUserPermissionsServer) mustEmbedUnimplementedUserPermissionsServer() {}

// UnsafeUserPermissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermissionsServer will
// result in compilation errors.
type UnsafeUserPermissionsServer interface {
	mustEmbedUnimplementedUserPermissionsServer()
}

func RegisterUserPermissionsServer(s grpc.ServiceRegistrar, srv UserPermissionsServer) {
	s.RegisterService(&UserPermissions_ServiceDesc, srv)
}

func _UserPermissions_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionsServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.UserPermissions/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionsServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissions_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.UserPermissions/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissions_AddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionsServer).AddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.UserPermissions/AddApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionsServer).AddApp(ctx, req.(*AddAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissions_RevokeApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionsServer).RevokeApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.UserPermissions/RevokeApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionsServer).RevokeApp(ctx, req.(*RevokeAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermissions_ServiceDesc is the grpc.ServiceDesc for UserPermissions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermissions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permisson_proto.UserPermissions",
	HandlerType: (*UserPermissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _UserPermissions_Init_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserPermissions_Get_Handler,
		},
		{
			MethodName: "AddApp",
			Handler:    _UserPermissions_AddApp_Handler,
		},
		{
			MethodName: "RevokeApp",
			Handler:    _UserPermissions_RevokeApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.user-permissions/proto/user-permissions.proto",
}
