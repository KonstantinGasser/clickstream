syntax="proto3";

package user_service;

service UserService {
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}

    rpc GetUserList(GetUserListRequest) returns (GetUserListResponse) {}
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
    
    rpc VerifySameOrgn(VerifySameOrgnRequest) returns (VerifySameOrgnResposne) {}
}


// RPC AUTHENTICATE
// ***************************
message AuthenticateRequest {
    string tracing_ID = 1;
    string username = 2;
    string password = 3; 
}
message AuthenticateResponse {
    int32 status_code = 1;
    string msg = 2;
    UserTokenClaim user_claims = 3;
}

// RPC CREATE USER
message CreateUserRequest {
    string tracing_ID = 1;
    RegisterUser user = 2;
}
message CreateUserResponse {
    int32 status_code = 1;
    string msg = 2;    
}
// ***************************


// RPC UPDATE USER
message UpdateUserRequest {
    string tracing_ID = 1;
    string caller_uuid = 2;
    UpdatableUser user = 3;
}
message UpdateUserResponse {
    int32 status_code = 1; 
    string msg = 2;
}
// ***************************


// RPC GET USER LIST
message GetUserListRequest {
    string tracing_ID = 1;
    repeated string uuid_list = 2;
}
message GetUserListResponse {
    int32 status_code = 1;
    string msg = 2;
    repeated ComplexUser user_list = 3;
}
// ***************************


// RPC GET USER
message GetUserRequest {
    string tracing_ID = 1;
    string caller_uuid = 2;
    string for_uuid = 3;
}

message GetUserResponse {
    int32 status_code = 1;
    string msg = 2;
    ComplexUser user = 3;
}
// ***************************


// RPC VERIFY SAME 
message VerifySameOrgnRequest {
    string tracing_ID = 1; 
    string caller_uuid = 2;
    string base_object = 3;
    repeated string compare_with = 4;
}

message VerifySameOrgnResposne {
    int32 status_code = 1;
    string msg = 2;
    repeated string invalid_list = 3; // invalid holds all the values which comaprison failed
    bool truthful_valid = 4;
}
// ***************************



// common types
message ComplexUser {
    string uuid = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4; 
    string orgn_domain = 5;
    string orgn_position = 6;
    string profile_img_url = 7;
}

message RegisterUser {
    string username = 1;
    string password = 2;
    string first_name = 3;
    string last_name = 4; 
    string orgn_domain = 5;
    string orgn_position = 6;
}

message UpdatableUser {
    string first_name = 1; 
    string last_name = 2;
    string orgn_position = 3;
    string profile_img_url = 4;
}

message UserTokenClaim {
    string uuid = 1;
    string orgn_domain = 2;
}