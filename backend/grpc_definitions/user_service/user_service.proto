syntax="proto3";

package user_service;

service UserService {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
    rpc AuthUser(AuthRequest) returns (AuthResponse) {}
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
    rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {}
    rpc GetUsersByID(GetUsersByIDRequest) returns (GetUsersByIDResponse) {}
}

message GetUsersByIDRequest {
    string tracing_ID = 1;
    repeated string user_uuids = 2;
}

message GetUsersByIDResponse {
    int32 status_code = 1;
    string msg = 2;
    repeated User users = 3;
}
message GetUserByIDRequest {
    string tracing_ID = 1;
    string uuid = 2;
}

message GetUserByIDResponse {
    int32 status_code = 1;
    string msg = 2;
    User user = 3;
}

message UpdateUserRequest {
    string tracing_ID = 1;
    string UUID = 2;
    string first_name = 3;
    string last_name = 4;
   string orgn_position = 5;
}

message UpdateUserResponse {
    int32 status_code = 1; 
    string msg = 2;
}

message CreateUserRequest {
    string username = 1; 
    string password = 2;
    string orgn_domain = 3;
    // light distributed tracing ID - light because it serves the propose  of developing
    // because it is super dope what I am doing
    string tracing_ID = 4;
    string first_name = 5;
    string last_name = 6;
    string orgn_position = 7;
}

message CreateUserResponse {
    int32 status_code = 1;
    string msg = 2;    
}

// AuthRequest is the actual authentication request
// coming form the API-Gateway
message AuthRequest {
    string username = 1;
    string password = 2; 
    // light distributed tracing ID - light because it serves the propose  of developing
    // because it is super dope what I am doing
    string tracing_ID = 4;
}

// AuthResponse represents the response when a user
// performs a login request
message AuthResponse {
    int32 status_code = 1;
    string msg = 2;
    bool authenticated = 3;
    AuthenticatedUser user = 4;
}

// AuthenticatedUser's data is used in the user_service after a user
// has been successfuly authenticated
// by the token_service which uses the data as claims in the user JWT
message AuthenticatedUser {
    string username = 1;
    string uuid = 2;
    string orgn_domain = 3;
    string first_name = 4;
    string last_name = 5;
    string orgn_position = 6;
    string profile_img_url = 7;
}

message User {
    string uuid = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
    string orgn_domain = 5;
    string orgn_position = 6;
    string profile_img_url = 7;
}