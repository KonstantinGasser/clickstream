// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppConfigurationClient is the client API for AppConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppConfigurationClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error)
}

type appConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewAppConfigurationClient(cc grpc.ClientConnInterface) AppConfigurationClient {
	return &appConfigurationClient{cc}
}

func (c *appConfigurationClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.AppConfiguration/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appConfigurationClient) AddApp(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddAppResponse, error) {
	out := new(AddAppResponse)
	err := c.cc.Invoke(ctx, "/permisson_proto.AppConfiguration/AddApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppConfigurationServer is the server API for AppConfiguration service.
// All implementations must embed UnimplementedAppConfigurationServer
// for forward compatibility
type AppConfigurationServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error)
	mustEmbedUnimplementedAppConfigurationServer()
}

// UnimplementedAppConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedAppConfigurationServer struct {
}

func (UnimplementedAppConfigurationServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedAppConfigurationServer) AddApp(context.Context, *AddAppRequest) (*AddAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApp not implemented")
}
func (UnimplementedAppConfigurationServer) mustEmbedUnimplementedAppConfigurationServer() {}

// UnsafeAppConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppConfigurationServer will
// result in compilation errors.
type UnsafeAppConfigurationServer interface {
	mustEmbedUnimplementedAppConfigurationServer()
}

func RegisterAppConfigurationServer(s grpc.ServiceRegistrar, srv AppConfigurationServer) {
	s.RegisterService(&AppConfiguration_ServiceDesc, srv)
}

func _AppConfiguration_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppConfigurationServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.AppConfiguration/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppConfigurationServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppConfiguration_AddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppConfigurationServer).AddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permisson_proto.AppConfiguration/AddApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppConfigurationServer).AddApp(ctx, req.(*AddAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppConfiguration_ServiceDesc is the grpc.ServiceDesc for AppConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permisson_proto.AppConfiguration",
	HandlerType: (*AppConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _AppConfiguration_Init_Handler,
		},
		{
			MethodName: "AddApp",
			Handler:    _AppConfiguration_AddApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.user-permissions/proto/user-permissions.proto",
}
