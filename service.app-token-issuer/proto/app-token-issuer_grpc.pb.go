// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppTokenIssuerClient is the client API for AppTokenIssuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppTokenIssuerClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	MarkDirty(ctx context.Context, in *MarkDirtyRequest, opts ...grpc.CallOption) (*MarkDirtyResponse, error)
}

type appTokenIssuerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppTokenIssuerClient(cc grpc.ClientConnInterface) AppTokenIssuerClient {
	return &appTokenIssuerClient{cc}
}

func (c *appTokenIssuerClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppTokenIssuer/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenIssuerClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppTokenIssuer/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenIssuerClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppTokenIssuer/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenIssuerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppTokenIssuer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTokenIssuerClient) MarkDirty(ctx context.Context, in *MarkDirtyRequest, opts ...grpc.CallOption) (*MarkDirtyResponse, error) {
	out := new(MarkDirtyResponse)
	err := c.cc.Invoke(ctx, "/issuer_proto.AppTokenIssuer/MarkDirty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppTokenIssuerServer is the server API for AppTokenIssuer service.
// All implementations must embed UnimplementedAppTokenIssuerServer
// for forward compatibility
type AppTokenIssuerServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Issue(context.Context, *IssueRequest) (*IssueResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	MarkDirty(context.Context, *MarkDirtyRequest) (*MarkDirtyResponse, error)
	mustEmbedUnimplementedAppTokenIssuerServer()
}

// UnimplementedAppTokenIssuerServer must be embedded to have forward compatible implementations.
type UnimplementedAppTokenIssuerServer struct {
}

func (UnimplementedAppTokenIssuerServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedAppTokenIssuerServer) Issue(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedAppTokenIssuerServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAppTokenIssuerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppTokenIssuerServer) MarkDirty(context.Context, *MarkDirtyRequest) (*MarkDirtyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkDirty not implemented")
}
func (UnimplementedAppTokenIssuerServer) mustEmbedUnimplementedAppTokenIssuerServer() {}

// UnsafeAppTokenIssuerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppTokenIssuerServer will
// result in compilation errors.
type UnsafeAppTokenIssuerServer interface {
	mustEmbedUnimplementedAppTokenIssuerServer()
}

func RegisterAppTokenIssuerServer(s grpc.ServiceRegistrar, srv AppTokenIssuerServer) {
	s.RegisterService(&AppTokenIssuer_ServiceDesc, srv)
}

func _AppTokenIssuer_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenIssuerServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppTokenIssuer/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenIssuerServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppTokenIssuer_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenIssuerServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppTokenIssuer/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenIssuerServer).Issue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppTokenIssuer_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenIssuerServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppTokenIssuer/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenIssuerServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppTokenIssuer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenIssuerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppTokenIssuer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenIssuerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppTokenIssuer_MarkDirty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkDirtyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTokenIssuerServer).MarkDirty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer_proto.AppTokenIssuer/MarkDirty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTokenIssuerServer).MarkDirty(ctx, req.(*MarkDirtyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppTokenIssuer_ServiceDesc is the grpc.ServiceDesc for AppTokenIssuer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppTokenIssuer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "issuer_proto.AppTokenIssuer",
	HandlerType: (*AppTokenIssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _AppTokenIssuer_Init_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _AppTokenIssuer_Issue_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AppTokenIssuer_Validate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppTokenIssuer_Get_Handler,
		},
		{
			MethodName: "MarkDirty",
			Handler:    _AppTokenIssuer_MarkDirty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.app.token-issuer/ports/proto/app-token-issuer.proto",
}
