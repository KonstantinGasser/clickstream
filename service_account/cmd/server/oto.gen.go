// Code generated by oto; DO NOT EDIT.

package main

import (
	"context"
	"github.com/pacedotdev/oto/otohttp"
	"net/http"
)

// AccountService handles and manages application users
type AccountService interface {
	CreateUser(context.Context, CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, LoginUserRequest) (*LoginUserResponse, error)
}

type accountServiceServer struct {
	server         *otohttp.Server
	accountService AccountService
}

// Register adds the AccountService to the otohttp.Server.
func RegisterAccountService(server *otohttp.Server, accountService AccountService) {
	handler := &accountServiceServer{
		server:         server,
		accountService: accountService,
	}
	server.Register("AccountService", "CreateUser", handler.handleCreateUser)
	server.Register("AccountService", "LoginUser", handler.handleLoginUser)
}

func (s *accountServiceServer) handleCreateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
	// var d map[string]interface{}
	// json.NewDecoder(r.Body).Decode(&d)
	// log.Printf("data: %v", d)
	var request CreateUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		panic(err)
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.accountService.CreateUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *accountServiceServer) handleLoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.accountService.LoginUser(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// CreateUserRequest request holding data to register new user
type CreateUserRequest struct {
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username     string `json:"username"`
	EmailAddress string `json:"emailAddress"`
	PasswordHash string `json:"passwordHash"`
}

// CreateUserResponse response after registration
type CreateUserResponse struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// LoginUserRequest request to auth user
type LoginUserRequest struct {
	Username     string `json:"username"`
	Passwordhash string `json:"passwordhash"`
}

// LoginUserResponse response for login request
type LoginUserResponse struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
	Token  string `json:"token"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
